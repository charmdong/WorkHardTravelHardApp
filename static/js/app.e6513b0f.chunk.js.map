{"version":3,"sources":["color.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","todos","setTodos","travel","AsyncStorage","setItem","JSON","stringify","e","alert","Keyboard","dismiss","work","saveTodos","toSave","jsonValue","loadTodos","jsonVal","getItem","parse","domain","useEffect","addToDo","newTodos","Date","now","done","deleteTodo","key","Platform","OS","confirm","Alert","style","onPress","View","styles","container","StatusBar","header","TouchableOpacity","Text","btnText","color","TextInput","onSubmitEditing","onChangeText","payload","returnKeyType","value","placeholderTextColor","placeholder","input","ScrollView","Object","keys","map","todo","todoText","isDone","completeTodo","Fontisto","name","size","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","fontSize","fontWeight","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems"],"mappings":"mRAAaA,EACL,QADKA,EAEH,U,wlBCQK,SAASC,IAEtB,MAA8BC,oBAAS,GAAK,WAArCC,EAAO,KAAEC,EAAU,KAC1B,EAAwBF,mBAAS,IAAG,WAA7BG,EAAI,KAAEC,EAAO,KACpB,EAA0BJ,mBAAS,IAAG,WAA/BK,EAAK,KAAEC,EAAQ,KAChBC,EAAM,sBAAG,YACb,UACQC,UAAaC,QATN,UAS0BC,KAAKC,WAAWV,IACvD,MAAOW,GACPC,MAAM,mBAERX,GAAW,GACXY,UAASC,UACTX,EAAQ,OACT,kBATW,mCAUNY,EAAI,sBAAG,YACX,UACQR,UAAaC,QAnBN,UAmB0BC,KAAKC,WAAWV,IACvD,MAAOW,GACPC,MAAM,mBAERX,GAAW,GACXY,UAASC,UACTX,EAAQ,OACT,kBATS,mCAWJa,EAAS,sBAAG,UAAOC,GACvB,IACE,IAAMC,EAAYT,KAAKC,UAAUO,SAC3BV,UAAaC,QAhCL,SAgC0BU,GACxC,MAAOP,GACPC,MAAM,uBAET,gBAPc,sCAQTO,EAAS,sBAAG,YAChB,IAAMC,QAAgBb,UAAac,QAtCnB,UAuCZD,GACFf,EAASI,KAAKa,MAAMF,IAGtB,IAAMG,QAAehB,UAAac,QA1CnB,WA2CXE,GACFtB,EAAWQ,KAAKa,MAAMC,OAEzB,kBAVc,mCAYfC,qBAAU,WACRL,MACC,IAEH,IAAMM,EAAO,sBAAG,YACd,GAAY,KAATvB,EAAH,CAGA,IAAMwB,EAAQ,OAAOtB,GAAK,UAAGuB,KAAKC,MAAS,CAAE1B,OAAMF,UAAS6B,MAAM,KAClExB,EAASqB,SACHV,EAAUU,GAChBvB,EAAQ,QACT,kBARY,mCASP2B,EAAU,sBAAG,UAAOC,GAExB,GAAmB,QAAhBC,UAASC,IAEV,GADWC,QAAQ,qCACZ,CACL,IAAMR,EAAQ,KAAOtB,UACdsB,EAASK,GAChB1B,EAASqB,GACTV,EAAUU,SAGZS,UAAMvB,MACJ,eACA,gBAAiB,CACjB,CAACV,KAAM,UACP,CACEA,KAAM,WACNkC,MAAO,cACPC,QAAS,WACP,IAAMX,EAAQ,KAAOtB,UACdsB,EAASK,GAChB1B,EAASqB,GACTV,EAAUU,UAKnB,gBA3Be,sCAyChB,OACE,eAACY,EAAA,QAAI,CAACF,MAAOG,EAAOC,UAAU,UAC5B,cAACC,EAAA,UAAS,CAACL,MAAM,SACjB,eAACE,EAAA,QAAI,CAACF,MAAOG,EAAOG,OAAO,UACzB,cAACC,EAAA,QAAgB,CAACN,QAAStB,EAAK,SAC9B,cAAC6B,EAAA,QAAI,CAACR,MAAK,OAAMG,EAAOM,SAAO,IAAEC,MAAO9C,EAAU,QAAUH,IAAY,oBAE1E,cAAC8C,EAAA,QAAgB,CAACN,QAAS/B,EAAO,SAChC,cAACsC,EAAA,QAAI,CAACR,MAAK,OAAMG,EAAOM,SAAO,IAAEC,MAAQ9C,EAAoBH,EAAV,UAAsB,yBAG7E,eAACyC,EAAA,QAAI,WACH,cAACS,EAAA,QAAS,CACRC,gBAAiBvB,EACjBwB,aAzFa,SAACC,GAAO,OAAK/C,EAAQ+C,IA0FlCC,cAAc,OACdC,MAAOlD,EACPmD,qBAAqB,OACrBC,YAAatD,EAAU,cAAgB,yBACvCoC,MAAOG,EAAOgB,QAEhB,cAACC,EAAA,QAAU,UACRpD,GAASqD,OAAOC,KAAKtD,GAAOuD,KAAI,SAAA5B,GAAG,OAClC3B,EAAM2B,GAAK/B,UAAYA,EACrB,eAACsC,EAAA,QAAI,CAACF,MAAOG,EAAOqB,KAAK,UACvB,cAAChB,EAAA,QAAI,CAACR,MAAOG,EAAOsB,SAAS,SAAEzD,EAAM2B,GAAK7B,OAC1C,cAACyC,EAAA,QAAgB,CAACN,QAAS,kBAvCpB,SAACN,GACpB,IAAM+B,EAAS1D,EAAM2B,GAAKF,KACpBH,EAAQ,KAAOtB,GAErBsB,EAASK,GAAI,OAAOL,EAASK,IAAI,IAAEF,MAAMiC,IAEzCzD,EAASqB,GACTV,EAAUU,GAgCmCqC,CAAahC,IAAK,SACjD,cAACiC,EAAA,QAAQ,CAACC,KAAK,QAAQC,KAAM,GAAIpB,MAAO1C,EAAM2B,GAAKF,KAAO,QAAU,WAEtE,cAACc,EAAA,QAAgB,CAACN,QAAS,aAAsB,SAC/C,cAAC2B,EAAA,QAAQ,CAACC,KAAK,SAASC,KAAM,GAAIpB,MAAM,WAE1C,cAACH,EAAA,QAAgB,CAACN,QAAS,kBAAMP,EAAWC,IAAK,SAC/C,cAACiC,EAAA,QAAQ,CAACC,KAAK,QAAQC,KAAM,GAAIpB,MAAM,aATZf,GAWrB,gBASxB,IAAMQ,EAAS4B,UAAWC,OAAO,CAC/B5B,UAAW,CACT6B,KAAM,EACNC,gBAAiBzE,EACjB0E,kBAAmB,IAErB7B,OAAQ,CACN8B,eAAgB,gBAChBC,cAAe,MACfC,UAAW,KAEb7B,QAAS,CACP8B,SAAU,MACVC,WAAY,OAEdrB,MAAO,CACLe,gBAAiB,QACjBO,gBAAiB,GACjBN,kBAAmB,GACnBO,aAAc,GACdC,eAAgB,KAChBJ,SAAU,IAEZf,KAAM,CACJU,gBAAiBzE,EACjBmF,aAAc,GACdH,gBAAiB,GACjBN,kBAAmB,GACnBO,aAAc,GACdL,cAAe,MACfQ,WAAY,SACZT,eAAgB,iBAElBX,SAAU,CACRf,MAAO,QACP6B,SAAU,GACVC,WAAY,U","file":"static/js/app.e6513b0f.chunk.js","sourcesContent":["export const theme = {\n    bg: \"black\",\n    grey: \"#3a3d40\",\n\n}","import { StatusBar } from 'expo-status-bar';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Platform, StyleSheet, Text, View, TouchableOpacity, TextInput, Keyboard, ScrollView, Alert } from 'react-native';\nimport { theme } from './color';\nimport React, { useState, useEffect } from 'react';\nimport { Fontisto } from '@expo/vector-icons';\n\nconst STORAGE_KEY = \"@todos\";\nconst DOMAIN_KEY = \"@domain\";\n\nexport default function App() {\n\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\");\n  const [todos, setTodos] = useState({});\n  const travel = async () => {\n    try {\n      await AsyncStorage.setItem(DOMAIN_KEY, JSON.stringify(!working));\n    } catch (e) {\n      alert(\"Saving Error...\");\n    }\n    setWorking(false); \n    Keyboard.dismiss(); \n    setText(\"\");\n  }\n  const work = async () => {\n    try {\n      await AsyncStorage.setItem(DOMAIN_KEY, JSON.stringify(!working));\n    } catch (e) {\n      alert(\"Saving Error...\");\n    }\n    setWorking(true); \n    Keyboard.dismiss(); \n    setText(\"\");\n  }\n  const onChangeText = (payload) => setText(payload);\n  const saveTodos = async (toSave) => {\n    try {\n      const jsonValue = JSON.stringify(toSave);\n      await AsyncStorage.setItem(STORAGE_KEY, jsonValue);\n    } catch (e) {\n      alert(\"Saving Error...\");\n    }\n  }\n  const loadTodos = async () => {\n    const jsonVal = await AsyncStorage.getItem(STORAGE_KEY);\n    if (jsonVal) {\n      setTodos(JSON.parse(jsonVal));\n    }\n\n    const domain = await AsyncStorage.getItem(DOMAIN_KEY);\n    if (domain) {\n      setWorking(JSON.parse(domain));\n    }\n  }\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  const addToDo = async () => {\n    if(text === \"\") return;\n\n    // save to do\n    const newTodos = {...todos, [Date.now()] : { text, working, done: false}};\n    setTodos(newTodos);\n    await saveTodos(newTodos);\n    setText(\"\");\n  }\n  const deleteTodo = async (key) => {\n    // 접속한 OS가 무엇인지 확인\n    if(Platform.OS === \"web\") {\n      const ok = confirm(\"Do you want to delete this To Do?\");\n      if(ok) {\n        const newTodos = {...todos};\n        delete newTodos[key];\n        setTodos(newTodos);\n        saveTodos(newTodos);\n      }\n    } else {\n      Alert.alert(\n        \"Delete To Do\", \n        \"Are you sure?\", [\n        {text: \"Cancel\"},\n        {\n          text: \"I'm sure\", \n          style: \"destructive\",\n          onPress: () => {\n            const newTodos = {...todos};\n            delete newTodos[key];\n            setTodos(newTodos);\n            saveTodos(newTodos);\n          },\n        },\n      ]);\n    }\n  }\n  const completeTodo = (key) => {\n    const isDone = todos[key].done;\n    const newTodos = {...todos};\n    \n    newTodos[key] = {...newTodos[key], done: isDone ? false : true};\n    \n    setTodos(newTodos);\n    saveTodos(newTodos);\n  }\n  const modifyTodo = (key) => {\n\n  }\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text style={{...styles.btnText, color: working ? \"white\" : theme.grey}}>Work</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n          <Text style={{...styles.btnText, color: !working ? \"white\" : theme.grey}}>Travel</Text>\n        </TouchableOpacity>\n      </View>\n      <View>\n        <TextInput \n          onSubmitEditing={addToDo}\n          onChangeText={onChangeText}\n          returnKeyType=\"done\"\n          value={text}\n          placeholderTextColor=\"grey\"\n          placeholder={working ? \"Add a To Do\" : \"Where do you wanna go?\"}\n          style={styles.input}\n        />\n        <ScrollView>\n          {todos && Object.keys(todos).map(key => \n            todos[key].working === working ? \n              <View style={styles.todo} key={key}>\n                <Text style={styles.todoText}>{todos[key].text}</Text>\n                <TouchableOpacity onPress={() => completeTodo(key)}>\n                  <Fontisto name=\"check\" size={18} color={todos[key].done ? \"green\" : \"gray\"} />\n                </TouchableOpacity>\n                <TouchableOpacity onPress={() => modifyTodo(key)}>\n                  <Fontisto name=\"eraser\" size={18} color=\"gray\" />\n                </TouchableOpacity>\n                <TouchableOpacity onPress={() => deleteTodo(key)}>\n                  <Fontisto name=\"trash\" size={18} color=\"gray\" />\n                </TouchableOpacity>\n              </View> : null\n            ) \n          }\n        </ScrollView>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    marginTop: 100,\n  },\n  btnText: {\n    fontSize: \"40%\",\n    fontWeight: \"600\",\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    marginVertical: \"5%\",\n    fontSize: 15,\n  },\n  todo: {\n    backgroundColor: theme.grey,\n    marginBottom: 10,\n    paddingVertical: 20,\n    paddingHorizontal: 20,\n    borderRadius: 15,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  todoText: {\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"500\",\n  }\n});\n"],"sourceRoot":""}